// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma (models section)
model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  email    String    @unique
  name     String?
  password String?
  role     String    @default("user") // roles: user, admin
  posts    Post[]
  Like     Like[]
  Comment  Comment[]
  Share    Share[]
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  description String?
  content     String?
  image       String?
  tags        String[] // array of strings in MongoDB
  category    String?   // single category for the post
  published   Boolean   @default(false)
  author      User?     @relation(fields: [authorId], references: [id])
  authorId    String?   @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Like        Like[]
  Comment     Comment[]
  Share       Share[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // ensures one like per user per post
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Share {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
}
